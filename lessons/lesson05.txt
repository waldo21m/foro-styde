Integración continua con Codeship y GitHub en un proyecto de Laravel 5.3

En el siguiente video tutorial vamos a integrar Codeship a nuestro proyecto, lo
cual nos permitirá desarrollar con la práctica de desarrollo de software
conocida como Continuous Integration (CI) o Integración Continua.

Con esta práctica los integrantes de un equipo integran su trabajo frecuentemente,
usualmente varias veces al día, lo que lleva a una reducción de conflictos y
problemas de integración que ocurren cuando trabajamos en equipo, además también
permite detectar errores de forma temprana y en resumen permite que los
desarrolladores trabajen de forma más precisa y creen proyectos en menos tiempo.

Para trabajar con Continuous Integration, necesitamos una herramienta o servicio
que nos permita construir el proyecto y ejecutar las pruebas de forma automática
cada vez que un desarrollador realice una integración (por ejemplo un commit) a
dicho proyecto.

Por supuesto tenemos varias opciones para contratar este servicio, una de ellas
es Travis CI que ya conocimos en el curso de desarrollo de componentes para PHP
y el día de hoy vamos a aprender sobre Codeship que tiene un plan gratuito para
proyectos privados y nos permite trabajar tanto con GitHub como con BitBucket.

Notas:

Comandos para construir el proyecto en Codeship

phpenv local 7.0
mysql -e 'create database foro_tests;'
composer install --prefer-dist --no-interaction
cp .env.codeship .env
php artisan migrate --force

Comando para ejecutar las pruebas

vendor/bin/phpunit

Nota: Por supuesto recuerda usar la versión de PHP que esté usando en el
servidor de tu proyecto.

Configuración en tu proyecto
Crea un nuevo archivo de entornos .env.codeship (puedes copiar y pegar el archivo
.env o .env.example) y asegúrate de colocar DB_CONNECTION como “mysql_tests” y en
DB_DATABASE coloca foro_tests. Ten cuidado de NO subir llaves secretas o claves
al repositorio de Git.

El nombre de usuario y la contraseña de la base de datos de Codeship están en las
variables de entorno MYSQL_USER y MYSQL_PASSWORD por lo cuál necesitamos cambiar
la configuración de la conexión mysql_tests para que Codeship funcione
adecuadamente:

'mysql_tests' => [
    'driver' => 'mysql',
    'host' => env('DB_HOST', 'localhost'),
    'port' => env('DB_PORT', '3306'),
    'database' => env('DB_DATABASE_TESTS', 'foro_tests'),
    'username' => env('MYSQL_USER', env('DB_USERNAME', 'forge')),
    'password' => env('MYSQL_PASSWORD', env('DB_PASSWORD', '')),
    'charset' => 'utf8',
    'collation' => 'utf8_unicode_ci',
    'prefix' => '',
    'strict' => true,
    'engine' => null,
],

Cachear las dependencias de Composer
Para que el proceso de Codeship termine mucho más rápido, es una muy buena idea
cachear las dependencias de Composer, para ello agrega la variable de entorno
COMPOSER_HOME con el valor ${HOME}/cache/composer en la opción Environment de la
configuración de tu proyecto en Codeship. Además asegúrate que el comando para
instalar Composer tenga la opción --prefer-dist.

Enlaces relacionados:
	- Sitios oficiales de servicios de Integración Continua: Codeship y Travis CI.
	https://codeship.com/
	https://travis-ci.org/
	- Repositorios:
	https://github.com/
	https://bitbucket.org/product/

Mis apuntes:
Ingresamos al link https://app.codeship.com/projects, para ello, debemos tener
una cuenta creada en Codeship y nuestro repositorio funcionando en GitLab,
GitHub o cualquier otro. Luego, usamos los los comandos que indicaron en el curso
"Comandos para construir el proyecto en Codeship". En mi caso fue el siguiente:

phpenv local 7.2
mysql -e 'create database foro_styde_tests;'
composer install --prefer-source --no-interaction
cp .env.codeship .env
php artisan migrate --force

Configuramos nuestro "Test Pipelines" colocando el nombre que nos guste (en este
caso usé "Test Commands") y escribimos el comando para ejecutar nuestras pruebas
unitarias, que en Laravel sería vendor/bin/phpunit.

Para comprobar su funcionamiento, basta con realizar un commit y subirlo a
nuestro repositorio. Antes de hacer eso, vamos al IDE para configurar nuestro
archivo de .env.codeship que se encargará de la configuración del proyecto en
codeship. Nota que es exactamente igual que .env pero no usamos DB_USERNAME y
DB_PASSWORD.

Pero, al no usar DB_USERNAME y DB_PASSWORD, el Build fallará de forma
automática puesto que el nombre de usuario y la contraseña de la base de datos
de Codeship están en las variables de entorno MYSQL_USER y MYSQL_PASSWORD.
Para solucionar esto, hacemos lo indicado en las notas relacionadas de esta
lección.

Por último, debemos solucionar el problema de la caché de Composer... Si
seguimos usando composer install --prefer-source --no-interaction, nuestro build
tardaramos mucho más. Eso lo solucionamos ingresando en "Environment" y agregamos
una variable de entorno con el key "COMPOSER_HOME" con el value de
"${HOME}/cache/composer". Esto lo podemos conseguir en la documentación oficial
de Codeship. Por último, usamos estos comandos ahora:

phpenv local 7.2
mysql -e 'create database foro_styde_tests;'
composer install --prefer-dist --no-interaction
cp .env.codeship .env
php artisan migrate --force
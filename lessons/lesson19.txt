Desarrollo con pruebas de integración y regresión en Laravel 5.3 (TDD)

En esta lección vamos a trabajar en el desarrollo de la funcionalidad para que
un comentario sea marcado como respuesta a un post usando TDD pero esta vez
haciendo una prueba de integración y además vamos a apoyarnos en las pruebas de
regresión y en la refactorización para asegurarnos que un post sólo pueda tener
una respuesta.

Notas:

En esta lección trabajaremos con una prueba de integración para crearla en el
directorio integration ejecuta:

php artisan make:test integration/MarkCommentAsAnswerTest

Información: Conoce la diferencia entre una prueba de integración y una prueba
de aplicación o funcional (lección #13)

Nuestra prueba de integración extiende de la clase tests/TestCase.php y por lo
tanto como trabajaremos con la base de datos debemos incluir el trait
DatabaseTransactions.

Información: Para mayor información de este trait consulta: Traits para el
desarrollo de pruebas de integración en Laravel
https://styde.net/traits-para-el-desarrollo-de-pruebas-de-integracion-en-laravel/

El método fresh
https://laravel.com/api/5.3/Illuminate/Database/Eloquent/Model.html#method_fresh
de la clase Model de Laravel te devuelve una nueva instancia del modelo desde
la base de datos.

Nosotros podemos ejecutar un sólo método de prueba a la vez, por ejemplo:

vendor/bin/phpunit --filter test_a_post_can_be_answered

Necesitamos crear el model factory para los comentarios por tanto modificamos el
archivo /database/factories/ModelFactory.php para agregarlo, donde asignaremos
los modelos relacionados usando el tip explicado en la lección Uso de model
factories para crear registros con relaciones en Laravel 5.3 (lección #15).

Como estamos modificando las migraciones ya ejecutadas entonces necesitamos
volver ejecutar todas las migraciones para que los cambios se realicen:

php artisan migrate:refresh --database=mysql_tests

Agregando un atributo a la propiedad $casts de un modelo es una manera de forzar
que el atributo sea convertido a un tipo de datos específico, como por ejemplo,
el atributo pending sea booleano:

protected $casts = [
    'pending' => 'boolean'
];

Usamos las pruebas de regresión (lección #14) para revelar un bug o issue (algo
que no está funcionando correctamente), en este caso la hemos creado para
confirmar que solo un comentario sea marcado como respuesta a un post.

Te recomendamos que realices commits de los avances realizados al desarrollar
una funcionalidad para luego refactorizar y en caso de no funcionar no pierdas
tus cambios. ¿No tienes mucha experiencia en Git? no dejes de ver nuestro
Curso de Git y GitHub
https://styde.net/curso-de-git/

Material relacionado
    - Diferencia entre pruebas unitarias, de integración y de aplicación (TDD)
    lección #13
    - Verificar features ya desarrollados usando pruebas de regresión en Laravel
    lección #14
    - Uso de model factories para crear registros con relaciones en Laravel 5.3
    lección #15

Mis apuntes:
Vamos a partir en esta lección creando la prueba test_a_post_can_be_answered.
Esta consiste en lo siguiente: tendremos un post que se le agregará un
comentario. Este comentario será marcado como la respuesta correcta, por lo
tanto, veremos en nuestra BDD que el comentario será la respuesta correcta
como true y que el post ya no estará pendiente, es decir, será false.

En el commit "Add markAsAnswer method to the comment model" tendremos un
ejemplo funcional de nuestra prueba, sin embargo podemos refactorizarlo
como se propone. Antes, agregabamos una columna answer a la tabla comments
que se encargaba de marcar a un comentario como la respuesta correcta y
desarrollamos una prueba de regresión que mostraba un problema debido a
que varios comentarios podían estar marcados como verdaderos.

Dicha prueba tiene como nombre test_a_post_can_only_have_one_answer.
Esa prueba de regresión se solucionó agregando al inicio del método
markAsAnswer la siguiente línea de código.
	$this->post->comments()->where('answer', true)->update(['answer' => false]);
Este actualiza todos los comentarios que están como verdaderos de dicho post y
los cambia a un estado falso, solucionando dicho issue.

Sin embargo, existe un modo más elegante. Debemos quitar la columna answer
de la tabla comments y crearemos una columna llamada answer_id en la tabla de
posts. Este campo se encargará únicamente de almacenar el id del comentario
que sea la respuesta correcta.

Por último, crearemos un atributo answer en el modelo de Comment que será una
comparación entre el answer_id del post y el id del comentario. Si son iguales,
este comentario será la respuesta correcta, haciendo que todas las pruebas
funcionen de manera correcta.

Notese que ahora al llamar el método markAsAnswer, siempre estaremos
actualizando el answer_id con el comentario correcto.

Además, creamos un ModelFactory para los comentarios y usamos el atributo
protegido $casts.